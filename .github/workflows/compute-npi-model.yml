name: Compute npi-model and upload

on:
  push:
    branches:
      - 518-npi-model-data-merge
    paths:
      - 'data-pipeline/**'
      - '.github/workflows/compute-npi-model.yml'
env:
  RUN_REGION: us-west1-c
  IMAGE_NAME: npi-model

jobs:
  NPI model computation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Checkout data repo
        uses: actions/checkout@v2
        with:
          repository: epidemics/epimodel-covid-data
          path: data-pipeline/data

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: '4.0.0'

      - name: Install os R dependencies
        run: sudo apt install libcurl4-openssl-dev libxml2-dev libssl-dev

      - name: Cache R packages
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ hashFiles('**/dependencies.R') }}

      - name: Install R dependencies
        working-directory: data-pipeline
        run: Rscript ./scripts/dependencies.R

      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Get full python version
        id: full-python-version
        run: |
          echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Install and set up Poetry
        working-directory: data-pipeline
        run: |
          python get-poetry.py --preview -y
          source $HOME/.poetry/env
          poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v1
        with:
          path: data-pipeline/.venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        working-directory: data-pipeline
        run: |
          source $HOME/.poetry/env
          poetry install -E 'pymc3 pyro'

      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        name: Setup Google Cloud Platform
        with:
          version: '270.0.0'
          service_account_email: ${{ secrets.SA_EMAIL }}
          service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          gcloud auth configure-docker

      # decrypt secrets
      - name: Decrypt secrets
        working-directory: data-pipeline
        env:
          JSON_KEY: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        run: |
          echo "${JSON_KEY}" > key.json
          export GOOGLE_APPLICATION_CREDENTIALS=key.json
          gcloud auth activate-service-account --key-file key.json

          wget -q -O sops https://github.com/mozilla/sops/releases/download/v3.5.0/sops-v3.5.0.linux
          chmod +x sops
          ./sops -d ./deploy/chart/secrets.yaml > secrets.yaml.dec

      # Build the Docker image
      - name: Build Docker
        working-directory: data-pipeline
        run: |
          docker build -t gcr.io/${{ secrets.GKE_PROJECT }}/$IMAGE_NAME:$GITHUB_SHA -f Dockerfile.conda .

      # Push the Docker image to Google Container Registry
      - name: Publish Docker
        run: |
          docker push gcr.io/${{ secrets.GKE_PROJECT }}/$IMAGE_NAME:$GITHUB_SHA

      - name: Run model and upload results
        env:
          GCP_KEY: ${{ secrets.NPI_MODEL_SERVICE_ACCOUNT_KEY }}
        run: |
          gcloud gcloud compute instances create-with-container $IMAGE_NAME \
            --container-image gcr.io/${{ secrets.GKE_PROJECT }}/$IMAGE_NAME:$GITHUB_SHA
            --container-env GCP_KEY=GCP_KEY
            --container-command npi-model pavel2
            --container-restart-policy never
            --source-instance-template npi-model-instance-template
